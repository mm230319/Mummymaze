#include <stdio.h>
#include <SDL.h>
#include <SDL_ttf.h>
#include <math.h>
#include <time.h>

typedef struct Maze {
    int matrica;
};
struct Node {
    int data[2];
    struct Node* prev;
};
struct Stack {
    struct Node* LastIn;
};
void Push(struct Stack* stack, int x, int y) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data[0] = x;
    newNode->data[1] = y;
    newNode->prev = stack->LastIn;
    stack->LastIn = newNode;
}
void Pop(struct Stack* stack) {
    struct Node* temp = stack->LastIn;
    stack->LastIn = stack->LastIn->prev;
    free(temp);
}
int Zid(int x,int y,int x1,int y1,int n,struct Maze talon[2*n-1][2*n-1]){
    if((x1-x)==0) return (talon[2*x][2*y+1].matrica==1)?0:1;
    else if((y1-y)==0) return (talon[2*x+1][2*y].matrica==1)?0:1;
}
int Validan(int x, int y, int n) {
    return  ((x >= 0) && (y >= 0) && (x < n) && (y < n)) ? 1 : 0;
}
int NemaDalje(int x, int y, int n, struct Maze maze[n][n]) {
    int br = 0, komsija[4][2] = { {0,1},{0,-1},{1,0},{-1,0} };
    for (int i = 0; i < 4; i++) {
        if (Validan(x + komsija[i][0], y + komsija[i][1], n) && (maze[x + komsija[i][0]][y + komsija[i][1]].matrica == 0)) {
            br++;
        }
    }
    return (br != 0) ? 1 : 0;
}
void Barijera(int x, int y, int n,struct Maze maze[n][n], struct Maze talon[2 * n - 1][2 * n - 1], struct Stack* stack) {
    int komsija[4][2] = { {0,1},{0,-1},{1,0},{-1,0} };
    int x1 = stack->LastIn->data[0], y1 = stack->LastIn->data[1];
    for (int i = 0; i < 4; i++) {
        int x2 = x + komsija[i][0], y2 = y + komsija[i][1];
        if ((Validan(x + komsija[i][0], y + komsija[i][1], n)) && (x2 != x1 || y2 != y1) && (maze[x + komsija[i][0]][y + komsija[i][1]].matrica == 1)) {
            if (i < 2) talon[x * 2][(y < y + komsija[i][1]) ? (y * 2 + 1) : (y * 2 - 1)].matrica = 1;
            else talon[(x < x + komsija[i][0]) ? (x * 2 + 1) : (x * 2 - 1)][y * 2].matrica = 1;
        }
    }
}
void lavirint(int x, int y, int n, struct Maze maze[n][n], struct Maze talon[2 * n - 1][2 * n - 1]) {
    struct Stack stack;
    stack.LastIn = NULL;
    Push(&stack, x, y);
    int index, BrPosecenih = 1, BrCelija = pow(n, 2);
    int komsija[4][2] = { {0,  1},{0,  -1},{1,  0},{-1, 0} };
    while (BrPosecenih < BrCelija) {
        index = rand() % 4;
        int x1 = x + komsija[index][0], y1 = y + komsija[index][1];
        if (NemaDalje(x, y, n, maze)) {
            if ((Validan(x1, y1, n)) && (maze[x1][y1].matrica == 0)) {
                x = x1;
                y = y1;
                maze[x][y].matrica = 1;
                Barijera(x, y, n, maze, talon, &stack);
                Push(&stack, x, y);
                BrPosecenih++;
            }
            else continue;
        }
        else {
            while (!NemaDalje(x, y, n, maze)) {
                x = stack.LastIn->data[0];
                y = stack.LastIn->data[1];
                Pop(&stack);
            }
            Push(&stack, x, y);
        }
    }
}
void NapraviZid(SDL_Renderer *renderer,int x,int y,int w,int h,SDL_Texture *texture){
    SDL_Rect rect = {x,y,w,h};
    SDL_RenderCopy(renderer,texture,NULL,&rect);
}
void ObojiZid(SDL_Renderer *renderer,int x,int y,int w,int h){
    SDL_Rect rect = {x,y,w,h};
    SDL_RenderFillRect(renderer, &rect);
}
void CrtajSve(SDL_Renderer *renderer,int MaxWidth,int MaxHeight,int n, int velicina, struct Maze talon[2 * n - 1][2 * n - 1]){
    int x,y;
    SDL_Surface* surface1 = SDL_LoadBMP("C:/Users/Bosko/Downloads/ciglepod/zid.bmp");
    SDL_Texture* texture1 = SDL_CreateTextureFromSurface(renderer, surface1);
    SDL_Surface* surface2 = SDL_LoadBMP("C:/Users/Bosko/Downloads/ciglepod/zid1.bmp");
    SDL_Texture* texture2 = SDL_CreateTextureFromSurface(renderer, surface2);
    NapraviZid(renderer,12 * MaxWidth / 25,2 * MaxHeight / 15 ,velicina*n,velicina*n,texture1);
    //levi i desni zidovi
    NapraviZid(renderer,12 * MaxWidth / 25 + velicina * n,2 * MaxHeight / 15,velicina,velicina*n,texture2);
    NapraviZid(renderer,12 * MaxWidth / 25 - velicina,2 * MaxHeight / 15,velicina,velicina*n,texture2);
    //donji zid
    NapraviZid(renderer,12 * MaxWidth / 25 - velicina,2 * MaxHeight / 15 + velicina*n,velicina*(n+2),11*velicina/20,texture2);
    //gornji zid
    NapraviZid(renderer,12 * MaxWidth / 25 - velicina,2 * MaxHeight / 15 - velicina,velicina*(n+2),velicina,texture2);
    for (int i = 0; i < 2*n-1; i++) {
        for (int j = 0; j < 2*n-1; j++) {
            if(talon[i][j].matrica==2){
                x=i;
                y=j;
            }
            else if ((i % 2 == 0) && (j % 2 == 1) && (talon[i][j].matrica==1)) ObojiZid(renderer,12 * MaxWidth / 25 + 9*velicina/10 + velicina * (j/2),2 * MaxHeight / 15 + velicina * (i/2) - 11*velicina/100,velicina/5,6*velicina/5);
            else if((i % 2 == 1) && (j % 2 == 0) && (talon[i][j].matrica==1)) ObojiZid(renderer,12 * MaxWidth / 25 +  velicina * (j/2) - 21*velicina/192,2 * MaxHeight / 15 + 9*velicina/10 + velicina * (i/2),36*velicina/30,velicina/5);
        }
    }SDL_SetRenderDrawColor(renderer, 25, 12, 68, 255);
    if(x==0 && y>=0) ObojiZid(renderer,12 * MaxWidth / 25 + velicina/8 + velicina * (y/2),2 * MaxHeight / 15 + velicina * (x/2) - 11*velicina/10,3*velicina/4,11*velicina/10);
    else if(x==(2*n-2) && y>=0) ObojiZid(renderer,12 * MaxWidth / 25 + velicina/8 + velicina * (y/2),2 * MaxHeight / 15 + velicina * (x/2) + velicina,3*velicina/4,velicina/2);
    else if(y==0 && x>=0) ObojiZid(renderer,12 * MaxWidth / 25 - velicina,2 * MaxHeight / 15 + velicina * (x/2) + velicina/8,velicina,3*velicina/4);
    else if(y==(2*n-2) && x>=0) ObojiZid(renderer,12 * MaxWidth / 25 + velicina*(y/2) + velicina,2 * MaxHeight / 15 + velicina * (x/2) + velicina/8,velicina,3*velicina/4);
    ObojiZid(renderer,50,600,450,100);
    SDL_RenderPresent(renderer);
}
int main(int argc, char* argv[]) {
    srand((unsigned int)time(NULL));
    int MaxWidth = 1366, MaxHeight = 768,n=6,velicina,x,y,radi=1;
    velicina = (int)sqrt((double)(MaxHeight * MaxWidth) / (double)(2.8*n*n));
    struct Maze maze[n][n];
    struct Maze talon[2 * n - 1][2 * n - 1];
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            maze[i][j].matrica = 0;
    for (int i = 0; i < 2*n-1; i++)
        for (int j = 0; j < 2*n-1; j++)
            talon[i][j].matrica=0;
    x = rand()%4;
    switch (x) {
        case 0: y=rand()%n; x=0;break;
        case 1: y=n-1; x=rand()%n;break;
        case 2: y=rand()%n; x=n-1;break;
        case 3: y=0; x=rand()%n;break;
    }
    maze[x][y].matrica = 1;
    talon[x*2][y*2].matrica = 2;
    lavirint(x, y, n, maze, talon);
    SDL_Window* window = SDL_CreateWindow("Mummy maze",SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,MaxWidth,MaxHeight,0);
    SDL_Renderer* renderer = SDL_CreateRenderer(window,0,0);
    SDL_SetRenderDrawColor(renderer, 250, 120, 68, 255);
    SDL_RenderClear(renderer);
    SDL_RenderPresent(renderer);
    CrtajSve(renderer,MaxWidth,MaxHeight,n,velicina,talon);
    SDL_Event event;
    x=rand()%n;
    y=rand()%n;
    int x1=12 * MaxWidth / 25 + velicina/4 +velicina * y, y1=2 * MaxHeight / 15 +  velicina/4 + x*velicina;
    ObojiZid(renderer,x1,y1,velicina/2,velicina/2);
    SDL_RenderPresent(renderer);
    while (radi){
        while (SDL_PollEvent(&event)!=0){
            if(event.type==SDL_QUIT){
                radi=0;
            }
            if(event.type==SDL_KEYDOWN){
                SDL_SetRenderDrawColor(renderer, 100, 100, 100, 100);
                if(event.key.keysym.sym == SDLK_w || event.key.keysym.sym==SDLK_UP){
                    if(Validan(x-1,y,n) && Zid(x-1, y, x, y, n, talon)) {
                            x -= 1;
                            y1 -= velicina;
                            SDL_RenderClear(renderer);
                            CrtajSve(renderer, MaxWidth, MaxHeight, n, velicina, talon);
                            ObojiZid(renderer, x1, y1, velicina / 2, velicina / 2);
                    }
                }else if(event.key.keysym.sym == SDLK_s || event.key.keysym.sym==SDLK_DOWN){
                    if(Validan(x+1,y,n) && Zid(x, y, x+1, y, n, talon)) {
                            x += 1;
                            y1 += velicina;
                            SDL_RenderClear(renderer);
                            CrtajSve(renderer, MaxWidth, MaxHeight, n, velicina, talon);
                            ObojiZid(renderer, x1, y1, velicina / 2, velicina / 2);
                    }
                }else if(event.key.keysym.sym == SDLK_a || event.key.keysym.sym==SDLK_LEFT){
                    if(Validan(x,y-1,n) && Zid(x, y-1, x, y, n, talon)) {
                            y -= 1;
                            x1 -= velicina;
                            SDL_RenderClear(renderer);
                            CrtajSve(renderer, MaxWidth, MaxHeight, n, velicina, talon);
                            ObojiZid(renderer, x1, y1, velicina / 2, velicina / 2);
                    }
                }else if(event.key.keysym.sym == SDLK_d || event.key.keysym.sym==SDLK_RIGHT){
                    if(Validan(x,y+1,n) && Zid(x, y, x, y+1, n, talon)) {
                            y += 1;
                            x1+=velicina;
                            SDL_RenderClear(renderer);
                            CrtajSve(renderer, MaxWidth, MaxHeight, n, velicina, talon);
                            ObojiZid(renderer, x1, y1, velicina / 2, velicina / 2);
                    }
                }
                SDL_RenderPresent(renderer);
            }
        }
    }
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}
